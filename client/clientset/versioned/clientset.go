/*
Copyright 2022 The Karmada Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	glog "github.com/golang/glog"
	clusterv1alpha1 "github.com/karmada-io/api/client/clientset/versioned/typed/cluster/v1alpha1"
	configv1alpha1 "github.com/karmada-io/api/client/clientset/versioned/typed/config/v1alpha1"
	networkingv1alpha1 "github.com/karmada-io/api/client/clientset/versioned/typed/networking/v1alpha1"
	policyv1alpha1 "github.com/karmada-io/api/client/clientset/versioned/typed/policy/v1alpha1"
	workv1alpha1 "github.com/karmada-io/api/client/clientset/versioned/typed/work/v1alpha1"
	workv1alpha2 "github.com/karmada-io/api/client/clientset/versioned/typed/work/v1alpha2"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	ClusterV1alpha1() clusterv1alpha1.ClusterV1alpha1Interface
	// Deprecated: please explicitly pick a version if possible.
	Cluster() clusterv1alpha1.ClusterV1alpha1Interface
	ConfigV1alpha1() configv1alpha1.ConfigV1alpha1Interface
	// Deprecated: please explicitly pick a version if possible.
	Config() configv1alpha1.ConfigV1alpha1Interface
	NetworkingV1alpha1() networkingv1alpha1.NetworkingV1alpha1Interface
	// Deprecated: please explicitly pick a version if possible.
	Networking() networkingv1alpha1.NetworkingV1alpha1Interface
	PolicyV1alpha1() policyv1alpha1.PolicyV1alpha1Interface
	// Deprecated: please explicitly pick a version if possible.
	Policy() policyv1alpha1.PolicyV1alpha1Interface
	WorkV1alpha1() workv1alpha1.WorkV1alpha1Interface
	// Deprecated: please explicitly pick a version if possible.
	Work() workv1alpha1.WorkV1alpha1Interface
	WorkV1alpha2() workv1alpha2.WorkV1alpha2Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	clusterV1alpha1    *clusterv1alpha1.ClusterV1alpha1Client
	configV1alpha1     *configv1alpha1.ConfigV1alpha1Client
	networkingV1alpha1 *networkingv1alpha1.NetworkingV1alpha1Client
	policyV1alpha1     *policyv1alpha1.PolicyV1alpha1Client
	workV1alpha1       *workv1alpha1.WorkV1alpha1Client
	workV1alpha2       *workv1alpha2.WorkV1alpha2Client
}

// ClusterV1alpha1 retrieves the ClusterV1alpha1Client
func (c *Clientset) ClusterV1alpha1() clusterv1alpha1.ClusterV1alpha1Interface {
	return c.clusterV1alpha1
}

// Deprecated: Cluster retrieves the default version of ClusterClient.
// Please explicitly pick a version.
func (c *Clientset) Cluster() clusterv1alpha1.ClusterV1alpha1Interface {
	return c.clusterV1alpha1
}

// ConfigV1alpha1 retrieves the ConfigV1alpha1Client
func (c *Clientset) ConfigV1alpha1() configv1alpha1.ConfigV1alpha1Interface {
	return c.configV1alpha1
}

// Deprecated: Config retrieves the default version of ConfigClient.
// Please explicitly pick a version.
func (c *Clientset) Config() configv1alpha1.ConfigV1alpha1Interface {
	return c.configV1alpha1
}

// NetworkingV1alpha1 retrieves the NetworkingV1alpha1Client
func (c *Clientset) NetworkingV1alpha1() networkingv1alpha1.NetworkingV1alpha1Interface {
	return c.networkingV1alpha1
}

// Deprecated: Networking retrieves the default version of NetworkingClient.
// Please explicitly pick a version.
func (c *Clientset) Networking() networkingv1alpha1.NetworkingV1alpha1Interface {
	return c.networkingV1alpha1
}

// PolicyV1alpha1 retrieves the PolicyV1alpha1Client
func (c *Clientset) PolicyV1alpha1() policyv1alpha1.PolicyV1alpha1Interface {
	return c.policyV1alpha1
}

// Deprecated: Policy retrieves the default version of PolicyClient.
// Please explicitly pick a version.
func (c *Clientset) Policy() policyv1alpha1.PolicyV1alpha1Interface {
	return c.policyV1alpha1
}

// WorkV1alpha1 retrieves the WorkV1alpha1Client
func (c *Clientset) WorkV1alpha1() workv1alpha1.WorkV1alpha1Interface {
	return c.workV1alpha1
}

// Deprecated: Work retrieves the default version of WorkClient.
// Please explicitly pick a version.
func (c *Clientset) Work() workv1alpha1.WorkV1alpha1Interface {
	return c.workV1alpha1
}

// WorkV1alpha2 retrieves the WorkV1alpha2Client
func (c *Clientset) WorkV1alpha2() workv1alpha2.WorkV1alpha2Interface {
	return c.workV1alpha2
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.clusterV1alpha1, err = clusterv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.configV1alpha1, err = configv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.networkingV1alpha1, err = networkingv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.policyV1alpha1, err = policyv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.workV1alpha1, err = workv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.workV1alpha2, err = workv1alpha2.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		glog.Errorf("failed to create the DiscoveryClient: %v", err)
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.clusterV1alpha1 = clusterv1alpha1.NewForConfigOrDie(c)
	cs.configV1alpha1 = configv1alpha1.NewForConfigOrDie(c)
	cs.networkingV1alpha1 = networkingv1alpha1.NewForConfigOrDie(c)
	cs.policyV1alpha1 = policyv1alpha1.NewForConfigOrDie(c)
	cs.workV1alpha1 = workv1alpha1.NewForConfigOrDie(c)
	cs.workV1alpha2 = workv1alpha2.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.clusterV1alpha1 = clusterv1alpha1.New(c)
	cs.configV1alpha1 = configv1alpha1.New(c)
	cs.networkingV1alpha1 = networkingv1alpha1.New(c)
	cs.policyV1alpha1 = policyv1alpha1.New(c)
	cs.workV1alpha1 = workv1alpha1.New(c)
	cs.workV1alpha2 = workv1alpha2.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
